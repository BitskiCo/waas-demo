schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.2", for: EXECUTION)
{
  query: Query
}

directive @join__field(graph: join__Graph!, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

interface Activity
  @join__type(graph: ACTIVITY)
{
  chainId: Int!
  timestamp: DateTime
  transactionHash: String
}

interface Address
  @join__type(graph: TOKEN_API)
{
  raw: String!
}

type Amount
  @join__type(graph: ACTIVITY, key: "value decimals", resolvable: false)
  @join__type(graph: TOKEN_API, key: "value decimals")
{
  value: String!
  decimals: Int
  formatted(input: FormattedAmountInput): String @join__field(graph: TOKEN_API)
}

input AmountInput
  @join__type(graph: TOKEN_API)
{
  value: String!
  decimals: Int
}

type Balance
  @join__type(graph: TOKEN_API)
{
  address: String! @deprecated(reason: "Use `addressV2.raw`")
  addressV2: Address!
  amount: String!
  amountUnit: Amount
  amountBigInt: BigInt! @deprecated(reason: "Use `amountUnit.value`")
  value: String
  token: Token!
}

enum BalanceType
  @join__type(graph: TOKEN_API)
{
  NFTS
  CURRENCIES
}

scalar BigInt
  @join__type(graph: TOKEN_API)

type BlockchainAccount
  @join__type(graph: BLOCKCHAIN_ACCOUNTS, key: "id")
  @join__type(graph: TOKEN_API, key: "id")
{
  id: String!
  displayName: String @join__field(graph: BLOCKCHAIN_ACCOUNTS)
  kind: BlockchainAccountKind! @deprecated(reason: "Use `kindV2`") @join__field(graph: BLOCKCHAIN_ACCOUNTS)
  kindV2: BlockchainAccountKindV2! @join__field(graph: BLOCKCHAIN_ACCOUNTS)
  coinType: Int! @join__field(graph: BLOCKCHAIN_ACCOUNTS)
  address: String! @join__field(graph: BLOCKCHAIN_ACCOUNTS) @join__field(graph: TOKEN_API, external: true)
  annotations: JSONObject @join__field(graph: BLOCKCHAIN_ACCOUNTS)
  labels: JSONObject @join__field(graph: BLOCKCHAIN_ACCOUNTS)
  createdAt: DateTime! @join__field(graph: BLOCKCHAIN_ACCOUNTS)
  updatedAt: DateTime! @join__field(graph: BLOCKCHAIN_ACCOUNTS)
  emoji: String @join__field(graph: BLOCKCHAIN_ACCOUNTS)
  image: RemoteAsset @join__field(graph: BLOCKCHAIN_ACCOUNTS)
  balances(input: GetBlockchainAccountBalancesInput!): [Balance] @join__field(graph: TOKEN_API, requires: "address")
  totalCurrencyValueUSD(input: TotalCurrencyValueInput!): String @deprecated(reason: "Use `totalCurrencyValue(input: { currency: USD })`") @join__field(graph: TOKEN_API, requires: "address")
  totalCurrencyValue(input: TotalCurrencyValueV2Input!): String @join__field(graph: TOKEN_API, requires: "address")
}

enum BlockchainAccountKind
  @join__type(graph: BLOCKCHAIN_ACCOUNTS)
{
  Bitski
  View
}

enum BlockchainAccountKindV2
  @join__type(graph: BLOCKCHAIN_ACCOUNTS)
{
  BITSKI
  WATCHED
  SELF_CUSTODY
}

enum CacheControlScope
  @join__type(graph: ACTIVITY)
  @join__type(graph: BLOCKCHAIN_ACCOUNTS)
  @join__type(graph: FEATURE_FLAGS)
  @join__type(graph: IMAGE_DETAILS)
  @join__type(graph: TOKEN_API)
{
  PUBLIC
  PRIVATE
}

type CFTest
  @join__type(graph: TOKEN_API_SUBGRAPH_CLOUDFLARE, key: "id")
{
  id: ID!
  username: String
}

type Chain
  @join__type(graph: TOKEN_API, key: "id")
{
  id: Int!
  name: String!
  nativeTokenName: String
  isTestNet: Boolean
  balances(input: GetChainBalancesInput!): [Balance]
  blockNumber: Int
}

type Collection
  @join__type(graph: TOKEN_API)
{
  name: String
  description: String
  image: RemoteAsset
  standards: [String]
  floorPrices: [Price]
}

type CollectionV2
  @join__type(graph: ACTIVITY, key: "contractAddress coinType chainId")
  @join__type(graph: TOKEN_API, key: "contractAddress coinType chainId")
{
  contractAddress: String! @deprecated(reason: "Use `address.raw`")
  coinType: Int!
  chainId: Int!
  name: String
  description: String
  image: RemoteAsset
  standards: [String]
  address: Address! @join__field(graph: TOKEN_API)
  floorPrice: Price @deprecated(reason: "This data is still in testing. Use `groupedNFTBalances.floorPrices` in production.") @join__field(graph: TOKEN_API)
}

type ContractInteraction implements Activity
  @join__implements(graph: ACTIVITY, interface: "Activity")
  @join__type(graph: ACTIVITY)
{
  chainId: Int!
  timestamp: DateTime
  transactionHash: String
  contractAddress: String
}

type ContractMetadata
  @join__type(graph: ACTIVITY, key: "contractAddress coinType chainId")
  @join__type(graph: TOKEN_API, key: "contractAddress coinType chainId")
{
  contractAddress: String! @deprecated(reason: "Use `address.raw`")
  coinType: Int!
  chainId: Int!
  collectionV2: CollectionV2
  decimals: Int
  symbol: String
  address: Address! @join__field(graph: TOKEN_API)
  collection: Collection @deprecated(reason: "Use `collectionV2`") @join__field(graph: TOKEN_API)
}

type Currency implements Token
  @join__implements(graph: ACTIVITY, interface: "Token")
  @join__implements(graph: TOKEN_API, interface: "Token")
  @join__type(graph: ACTIVITY, key: "contractAddress coinType chainId")
  @join__type(graph: TOKEN_API, key: "contractAddress coinType chainId")
{
  contractAddress: String! @deprecated(reason: "Use `address.raw`")
  coinType: Int!
  chainId: Int!
  id: String
  collectionV2: CollectionV2
  symbol: String
  decimals: Int
  address: Address! @join__field(graph: TOKEN_API)
  chain: Chain @join__field(graph: TOKEN_API)
  collection: Collection @deprecated(reason: "Use `collectionV2`") @join__field(graph: TOKEN_API)
  metadata: TokenMetadata @deprecated(reason: "Use `metadataV2`") @join__field(graph: TOKEN_API)
  metadataV2: TokenMetadataV2 @join__field(graph: TOKEN_API)
  prices: [Price] @join__field(graph: TOKEN_API)
}

scalar DateTime
  @join__type(graph: ACTIVITY)
  @join__type(graph: BLOCKCHAIN_ACCOUNTS)
  @join__type(graph: TOKEN_API)

type EVMAddress implements Address
  @join__implements(graph: TOKEN_API, interface: "Address")
  @join__type(graph: TOKEN_API, key: "raw")
{
  raw: String!
  truncated: String
}

enum FiatCurrencies
  @join__type(graph: TOKEN_API)
{
  USD
}

input FormattedAmountInput
  @join__type(graph: TOKEN_API)
{
  locale: Locale
  truncateTo: Int
  cleanup: Boolean
}

type GatedContent
  @join__type(graph: TOKEN_API)
{
  kind: GatedContentKind!
  value: String!
}

enum GatedContentKind
  @join__type(graph: TOKEN_API)
{
  BULLET_TEXT
  FULL_RESOLUTION_IMAGE
  FULL_RESOLUTION_ANIMATION
  SNAP_LENS
  INSTAGRAM_FILTER
  CUSTOM_FILE
}

input GetActivitiesInput
  @join__type(graph: ACTIVITY)
{
  address: String!
  chainIds: [Int!]
  supportedChains: Boolean
  includeTestNets: Boolean
  limit: Int
}

input GetBalancesInput
  @join__type(graph: TOKEN_API)
{
  chainIds: [Int!]
  supportedChains: Boolean
  includeTestNets: Boolean
  address: String!
  type: BalanceType!
  disableMetadataPrefetch: Boolean
}

input GetBlockchainAccountBalancesInput
  @join__type(graph: TOKEN_API)
{
  chainIds: [Int!]
  supportedChains: Boolean
  includeTestNets: Boolean
  type: BalanceType!
}

input GetChainActivitiesInput
  @join__type(graph: ACTIVITY)
{
  address: String!
}

input GetChainBalancesInput
  @join__type(graph: TOKEN_API)
{
  address: String!
  type: BalanceType!
}

input GetChainsInput
  @join__type(graph: TOKEN_API)
{
  chainIds: [Int!]!
}

input GetContractMetadataInput
  @join__type(graph: TOKEN_API)
{
  contractAddress: String!
  coinType: Int!
  chainId: Int!
}

input GetFeatureFlagsInput
  @join__type(graph: FEATURE_FLAGS)
{
  userId: String!
}

input GetNFTBalancesGroupedInput
  @join__type(graph: TOKEN_API)
{
  chainIds: [Int!]
  supportedChains: Boolean
  includeTestNets: Boolean
  address: String!
  groupBy: NFTBalancesGroupedBy
  sortedBy: NFTBalancesSortedBy
  disableMetadataPrefetch: Boolean
}

input GetNFTMetadataInput
  @join__type(graph: TOKEN_API)
{
  contractAddress: String!
  coinType: Int!
  chainId: Int!
  id: String!
}

input GetTokenOwnersInput
  @join__type(graph: TOKEN_API)
{
  contractAddress: String!
  chainId: Int!
  id: String!
}

scalar join__FieldSet

enum join__Graph {
  ACTIVITY @join__graph(name: "activity", url: "http://activity-subgraph")
  BLOCKCHAIN_ACCOUNTS @join__graph(name: "blockchain-accounts", url: "http://blockchain-accounts-subgraph")
  FEATURE_FLAGS @join__graph(name: "feature-flags", url: "http://feature-flags-subgraph")
  IMAGE_DETAILS @join__graph(name: "image-details", url: "http://image-metadata-subgraph")
  TOKEN_API @join__graph(name: "token-api", url: "http://token-api-subgraph")
  TOKEN_API_SUBGRAPH_CLOUDFLARE @join__graph(name: "token-api-subgraph-cloudflare", url: "https://token-api-subgraph.bitski.workers.dev/graphql")
}

scalar JSONObject
  @join__type(graph: ACTIVITY)
  @join__type(graph: BLOCKCHAIN_ACCOUNTS)
  @join__type(graph: FEATURE_FLAGS)
  @join__type(graph: TOKEN_API)

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

enum Locale
  @join__type(graph: TOKEN_API)
{
  EN_US
}

type NFT implements Token
  @join__implements(graph: ACTIVITY, interface: "Token")
  @join__implements(graph: TOKEN_API, interface: "Token")
  @join__type(graph: ACTIVITY, key: "contractAddress coinType chainId id")
  @join__type(graph: TOKEN_API, key: "contractAddress coinType chainId id")
{
  contractAddress: String! @deprecated(reason: "Use `address.raw`")
  coinType: Int!
  chainId: Int!
  id: String!
  collectionV2: CollectionV2
  address: Address! @join__field(graph: TOKEN_API)
  chain: Chain @join__field(graph: TOKEN_API)
  collection: Collection @deprecated(reason: "Use `collectionV2`") @join__field(graph: TOKEN_API)
  metadata: TokenMetadata @deprecated(reason: "Use `metadataV2`") @join__field(graph: TOKEN_API)
  metadataV2: TokenMetadataV2 @join__field(graph: TOKEN_API)
  owners: [String] @join__field(graph: TOKEN_API)
  requestingOwner: String @join__field(graph: TOKEN_API)
  gatedContent: [GatedContent!] @join__field(graph: TOKEN_API)
  shareUrl: String @join__field(graph: TOKEN_API)
  image: RemoteAsset @join__field(graph: TOKEN_API)
  displayName: String @join__field(graph: TOKEN_API)
}

type NFTBalanceGroup
  @join__type(graph: TOKEN_API)
{
  name: String
  image: RemoteAsset
  balances: [Balance]
  floorPrices: [Price]
  collection: CollectionV2 @deprecated(reason: "This query is still in testing. Use `balances[0].collection` in production.")
}

enum NFTBalancesGroupedBy
  @join__type(graph: TOKEN_API)
{
  CONTRACT_ADDRESS
}

enum NFTBalancesSortedBy
  @join__type(graph: TOKEN_API)
{
  COLLECTION_NAME
}

type Payment
  @join__type(graph: ACTIVITY)
{
  amount: String
  from: String
  to: String
  token: Token @deprecated(reason: "Use `currency`")
  currency: Currency
  amountUnit: Amount
}

type Platform
  @join__type(graph: ACTIVITY)
{
  name: String
}

type Price
  @join__type(graph: TOKEN_API, key: "price currency")
{
  timestamp: DateTime
  currency: String!
  price: String!
  marketplace: String
  priceUnit: Amount
}

enum PurchaseType
  @join__type(graph: ACTIVITY)
{
  BUY_NOW
  ACCEPT_OFFER
}

type Query
  @join__type(graph: ACTIVITY)
  @join__type(graph: BLOCKCHAIN_ACCOUNTS)
  @join__type(graph: FEATURE_FLAGS)
  @join__type(graph: IMAGE_DETAILS)
  @join__type(graph: TOKEN_API)
  @join__type(graph: TOKEN_API_SUBGRAPH_CLOUDFLARE)
{
  activities(input: GetActivitiesInput!): [Activity] @join__field(graph: ACTIVITY)
  blockchainAccounts: [BlockchainAccount] @join__field(graph: BLOCKCHAIN_ACCOUNTS)
  blockchainAccount(id: String!): BlockchainAccount @join__field(graph: BLOCKCHAIN_ACCOUNTS)
  featureFlags(input: GetFeatureFlagsInput!): JSONObject @join__field(graph: FEATURE_FLAGS)
  getImageMimeType(url: String!): String @join__field(graph: IMAGE_DETAILS)
  remoteAsset(url: String!): RemoteAsset @join__field(graph: IMAGE_DETAILS)
  supportedChains(input: SupportedChainsInput!): [Chain] @join__field(graph: TOKEN_API)
  chains(input: GetChainsInput!): [Chain] @join__field(graph: TOKEN_API)
  contractMetadata(input: GetContractMetadataInput!): ContractMetadata @join__field(graph: TOKEN_API)
  contractMetadataV2(input: GetContractMetadataInput!): ContractMetadata @deprecated(reason: "This query is still in testing. Use `contractMetadata` in production.") @join__field(graph: TOKEN_API)
  token(input: GetNFTMetadataInput!): Token @join__field(graph: TOKEN_API)
  tokenOwners(input: GetTokenOwnersInput!): [String] @join__field(graph: TOKEN_API)
  balances(input: GetBalancesInput!): [Balance] @join__field(graph: TOKEN_API)
  groupedNFTBalances(input: GetNFTBalancesGroupedInput!): [NFTBalanceGroup] @join__field(graph: TOKEN_API)
  amount(input: AmountInput!): Amount @join__field(graph: TOKEN_API)
  cfTest: CFTest @join__field(graph: TOKEN_API_SUBGRAPH_CLOUDFLARE)
}

type RemoteAsset
  @join__type(graph: ACTIVITY, key: "url", resolvable: false)
  @join__type(graph: BLOCKCHAIN_ACCOUNTS, key: "url", resolvable: false)
  @join__type(graph: IMAGE_DETAILS, key: "url")
  @join__type(graph: TOKEN_API, key: "url", resolvable: false)
{
  url: String!
  type: RemoteAssetType @join__field(graph: IMAGE_DETAILS)
  mimeType: String @join__field(graph: IMAGE_DETAILS)
  resizedImage(input: ResizedImageInput!): RemoteAsset @join__field(graph: IMAGE_DETAILS)
  responsiveImages(widths: [Int!]!): [RemoteAsset] @join__field(graph: IMAGE_DETAILS)
}

enum RemoteAssetType
  @join__type(graph: IMAGE_DETAILS)
{
  IMAGE
  VIDEO
}

input ResizedImageInput
  @join__type(graph: IMAGE_DETAILS)
{
  anim: Boolean
  background: String
  blur: Int
  brightness: Float
  contrast: Float
  dpr: Int
  fit: ResizedImageInputFit
  format: ResizedImageInputFormat
  gamma: Float
  gravity: ResizedImageInputGravity
  height: Int
  metadata: ResizedImageInputMetadata
  quality: Int
  rotate: Int
  sharpen: Int
  width: Int
}

enum ResizedImageInputFit
  @join__type(graph: IMAGE_DETAILS)
{
  SCALE_DOWN
  CONTAIN
  COVER
  CROP
  PAD
}

enum ResizedImageInputFormat
  @join__type(graph: IMAGE_DETAILS)
{
  AUTO
  AVIF
  WEBP
}

input ResizedImageInputGravity
  @join__type(graph: IMAGE_DETAILS)
{
  auto: Boolean
  side: ResizedImageInputGravitySide
  x: Float
  y: Float
}

enum ResizedImageInputGravitySide
  @join__type(graph: IMAGE_DETAILS)
{
  LEFT
  RIGHT
  TOP
  BOTTOM
}

enum ResizedImageInputMetadata
  @join__type(graph: IMAGE_DETAILS)
{
  KEEP
  COPYRIGHT
  NONE
}

type ResizedImageInputTrim
  @join__type(graph: IMAGE_DETAILS)
{
  top: Int
  left: Int
  bottom: Int
  right: Int
}

input SupportedChainsInput
  @join__type(graph: TOKEN_API)
{
  includeTestNets: Boolean
  type: BalanceType!
}

interface Token
  @join__type(graph: ACTIVITY)
  @join__type(graph: TOKEN_API)
{
  contractAddress: String! @deprecated(reason: "Use `address.raw`")
  coinType: Int!
  chainId: Int!
  collectionV2: CollectionV2
  address: Address! @join__field(graph: TOKEN_API)
  chain: Chain @join__field(graph: TOKEN_API)
  id: String @join__field(graph: TOKEN_API)
  collection: Collection @join__field(graph: TOKEN_API)
  metadata: TokenMetadata @join__field(graph: TOKEN_API)
  metadataV2: TokenMetadataV2 @join__field(graph: TOKEN_API)
}

interface TokenApproval
  @join__type(graph: ACTIVITY)
{
  owner: String
  spender: ContractMetadata
  contract: ContractMetadata
}

type TokenApprovalAll implements TokenApproval & Activity
  @join__implements(graph: ACTIVITY, interface: "TokenApproval")
  @join__implements(graph: ACTIVITY, interface: "Activity")
  @join__type(graph: ACTIVITY)
{
  chainId: Int!
  timestamp: DateTime
  transactionHash: String
  owner: String
  spender: ContractMetadata
  contract: ContractMetadata
}

type TokenApproved implements TokenApproval & Activity
  @join__implements(graph: ACTIVITY, interface: "TokenApproval")
  @join__implements(graph: ACTIVITY, interface: "Activity")
  @join__type(graph: ACTIVITY)
{
  chainId: Int!
  timestamp: DateTime
  transactionHash: String
  owner: String
  spender: ContractMetadata
  contract: ContractMetadata
  rawAllowance: String
}

type TokenBurn implements TokenTransfer & Activity
  @join__implements(graph: ACTIVITY, interface: "TokenTransfer")
  @join__implements(graph: ACTIVITY, interface: "Activity")
  @join__type(graph: ACTIVITY)
{
  chainId: Int!
  timestamp: DateTime
  transactionHash: String
  amount: String
  token: Token
  amountUnit: Amount
  to: String
}

type TokenMetadata
  @join__type(graph: TOKEN_API)
{
  name: String
  description: String
  image: RemoteAsset
  animation: RemoteAsset
  animationUrl: RemoteAsset @deprecated(reason: "Use `animation`.")
  externalUrl: String
  marketplaceUrl: String
  attributes: [JSONObject]
  properties: JSONObject
}

type TokenMetadataV2
  @join__type(graph: TOKEN_API, key: "contractAddress coinType chainId id")
{
  contractAddress: String! @deprecated(reason: "Use `address.raw`")
  address: Address!
  coinType: Int!
  chainId: Int!
  id: String!
  name: String
  description: String
  image: RemoteAsset
  animation: RemoteAsset
  externalUrl: String
  marketplaceUrl: String
  attributes: [JSONObject]
  properties: JSONObject
}

type TokenMint implements TokenTransfer & Activity
  @join__implements(graph: ACTIVITY, interface: "TokenTransfer")
  @join__implements(graph: ACTIVITY, interface: "Activity")
  @join__type(graph: ACTIVITY)
{
  chainId: Int!
  timestamp: DateTime
  transactionHash: String
  amount: String
  token: Token
  amountUnit: Amount
  cost: String
  costUnit: Amount
}

type TokenPurchased implements TokenSale & Activity
  @join__implements(graph: ACTIVITY, interface: "TokenSale")
  @join__implements(graph: ACTIVITY, interface: "Activity")
  @join__type(graph: ACTIVITY)
{
  chainId: Int!
  timestamp: DateTime
  transactionHash: String
  token: Token @deprecated(reason: "Use `nft`")
  nft: NFT
  amount: String
  payment: Payment
  purchaseType: PurchaseType
  platform: Platform
  amountUnit: Amount
  seller: String
}

type TokenReceived implements TokenTransfer & Activity
  @join__implements(graph: ACTIVITY, interface: "TokenTransfer")
  @join__implements(graph: ACTIVITY, interface: "Activity")
  @join__type(graph: ACTIVITY)
{
  chainId: Int!
  timestamp: DateTime
  transactionHash: String
  amount: String
  token: Token
  amountUnit: Amount
  from: String
}

type TokenRejectAll implements TokenApproval & Activity
  @join__implements(graph: ACTIVITY, interface: "TokenApproval")
  @join__implements(graph: ACTIVITY, interface: "Activity")
  @join__type(graph: ACTIVITY)
{
  chainId: Int!
  timestamp: DateTime
  transactionHash: String
  owner: String
  spender: ContractMetadata
  contract: ContractMetadata
}

interface TokenSale
  @join__type(graph: ACTIVITY)
{
  token: Token @deprecated(reason: "Use `nft`")
  nft: NFT
  amount: String
  payment: Payment
  purchaseType: PurchaseType
  platform: Platform
  amountUnit: Amount
}

type TokenSent implements TokenTransfer & Activity
  @join__implements(graph: ACTIVITY, interface: "TokenTransfer")
  @join__implements(graph: ACTIVITY, interface: "Activity")
  @join__type(graph: ACTIVITY)
{
  chainId: Int!
  timestamp: DateTime
  transactionHash: String
  amount: String
  token: Token
  amountUnit: Amount
  to: String
}

type TokenSold implements TokenSale & Activity
  @join__implements(graph: ACTIVITY, interface: "TokenSale")
  @join__implements(graph: ACTIVITY, interface: "Activity")
  @join__type(graph: ACTIVITY)
{
  chainId: Int!
  timestamp: DateTime
  transactionHash: String
  token: Token @deprecated(reason: "Use `nft`")
  nft: NFT
  amount: String
  payment: Payment
  purchaseType: PurchaseType
  platform: Platform
  amountUnit: Amount
  buyer: String
}

type TokenSwap implements Activity
  @join__implements(graph: ACTIVITY, interface: "Activity")
  @join__type(graph: ACTIVITY)
{
  chainId: Int!
  timestamp: DateTime
  transactionHash: String
  trader: String
  received: TokenSwapDetails
  sent: TokenSwapDetails
  platform: Platform
}

type TokenSwapDetails
  @join__type(graph: ACTIVITY)
{
  token: Token @deprecated(reason: "Use `currency`")
  currency: Currency
  amount: String
  amountUnit: Amount
}

interface TokenTransfer
  @join__type(graph: ACTIVITY)
{
  amount: String
  token: Token
  amountUnit: Amount
}

input TotalCurrencyValueInput
  @join__type(graph: TOKEN_API)
{
  chainIds: [Int!]
  supportedChains: Boolean
}

input TotalCurrencyValueV2Input
  @join__type(graph: TOKEN_API)
{
  chainIds: [Int!]
  supportedChains: Boolean
  currency: FiatCurrencies!
}